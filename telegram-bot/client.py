import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters import Command
import nest_asyncio
from mcp import ClientSession
from mcp.client.sse import sse_client
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import json
import os
asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())
nest_asyncio.apply()


TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")


bot = Bot(token=str(TELEGRAM_BOT_TOKEN))
dp = Dispatcher()

async def call_mcp_tool(tool_name, args):
    async with sse_client("http://eorabot:8050/sse") as (read_stream, write_stream):
        async with ClientSession(read_stream, write_stream) as session:
            await session.initialize()
            return await session.call_tool(tool_name, arguments=args)

@dp.message(Command("start"))
async def start_cmd(msg: types.Message):
    await msg.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ EORA.\n–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

@dp.message()
async def answer_any(msg: types.Message):
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞...")

    response = await call_mcp_tool("ask_question", {"question": msg.text})

    answer = response.content[0].model_dump()

    try:
        answer_data = json.loads(answer['text'])
        sources = answer["sources"]
        
    except Exception as e:
        await msg.answer("–û—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º JSON–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await msg.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! üß†\n"
        "–ö–æ–º–ø–∞–Ω–∏—è <b>EORA</b> –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç—ã, –º–∏—Å—Å–∏—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É."
    )

def run_bot():
    dp.run_polling(bot)

if __name__ == "__main__":
    asyncio.run(run_bot())